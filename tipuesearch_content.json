{"pages":[{"text":"This is something, that I always have to check. So today I'm writing it down. Documentation to subprocess.Popen is here . So pipelines are useful when you want to do something with output of command performed by Popen. What you would like to do with output: pass it to another bash command use it inside Python script Pass output to another bash command So you want to pass output of first bash command to another. This will be equivalent of this code in bash: $ ls /etc | grep ntp ntp-restrict.conf ntp.conf ntp_opendirectory.conf In Python you do that like this: p1 = subprocess . Popen ( 'ls /etc' . split (), stdout = subprocess . PIPE ) p2 = subprocess . Popen ( 'grep ntp' . split (), stdin = p1 . stdout , stdout = subprocess . PIPE ) print p2 . communicate ()[ 0 ] Alternative to communicate function Instead of \"communicate\" function you can use \"read\" on stdout of subprocess. But first you have to wait for end of subprocess call >>> p2 . wait () >>> print p2 . stdout . read () Although this way have one disadvantage. It moves file pointer do the end of file. So every subsequent call will return empty string: >>> p2 . wait () >>> print p2 . stdout . read () ntp-restrict.conf ntp.conf ntp_opendirectory.conf >>> p2 . stdout . read () ''","tags":"Programming","loc":"http://kendriu.com/how-to-use-pipes-in-python-subprocesspopen-objects","title":"How to use pipes in python subprocess.Popen objects"},{"text":"About notifications I like jenkins very much. If you will make mistake, he can tell you where you were wrong. Now here's the catch, if you don't visit jenkins enough, he is not helpful at all. But you can do something about it. This is the moment, where notification plugins comes to safe the world. Jenkins is known from reach variety of plugins. One type of them serves for notification about jobs status. But what if none of them are installed in your jenkins? What if you don't have rights to install any. Moreover your admin is asshole and you try to avoid him. Well, then I have solution for you. If you have Mac, please meet \"Jenkins Jr\". Jenkins Jr Idea is simple. You install \"Jenkins Jr\" and he checks in your name status of jobs. If status changes, you receive pleasant notification in Mac way. Here how you setup - step by step. Installation Installation is easy, because Jenkins Jr is in App Store . After installation, start Jenkins Jr. It should be visible as icon in tray. Setup First of all you have to add jobs to watch. To do that, you will need to copy url of jenkins job: Paste copied url into Jenkins Jr ( Settings -> Add ): In \"Add\" dialog box, you have also place for login and password to jenkins. If you want Jenkins Jr to start up after every login, you have to add it to Login Items in your account settings. To do that go to System Preferences -> User & Groups -> <Your Account> -> Login Items and add it from Applications folder. How it looks As I said, Jenkins Jr uses standard Mac notifications. After each job run, you will see notification in upper right corner about build status: You can see all notifications in Notifications area: If you click on one of them, it will open view of finished build in your browser.","tags":"Programming","loc":"http://kendriu.com/jenkins-jr-jenkins-notifications-for-mac","title":"Jenkins Jr â€“ Jenkins notifications for Mac"}]}