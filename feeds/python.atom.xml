<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kendriu writes...</title><link href="http://kendriu.com/" rel="alternate"></link><link href="http://kendriu.com/feeds/python.atom.xml" rel="self"></link><id>http://kendriu.com/</id><updated>2015-10-01T17:13:00+02:00</updated><entry><title>Joe</title><link href="http://kendriu.com/joe" rel="alternate"></link><updated>2015-10-01T17:13:00+02:00</updated><author><name>Andrzej Skupień</name></author><id>tag:kendriu.com,2015-10-01:joe</id><summary type="html">
&lt;!-- --&gt;
&lt;p&gt;In this article I write about &lt;a class="reference external" href="https://github.com/karan/joe"&gt;Joe&lt;/a&gt; – Python tool that makes
creating .gitignore files much easier.&lt;/p&gt;
&lt;img alt="Joe" src="https://camo.githubusercontent.com/d629d9cab221ad378f07d38f00e34b11cab5e299/687474703a2f2f692e696d6775722e636f6d2f7938673530366e2e706e673f31"/&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Problem&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every time I create new project, there comes time, when I want to put it under
git control and do the first commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init
Initialized empty Git repository in &amp;lt;/path/to/directory&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git status &lt;span class="c"&gt;# good practice - check before commit&lt;/span&gt;
&lt;span class="c"&gt;# (...)&lt;/span&gt;
Untracked files:
&lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add &amp;lt;file&amp;gt;..."&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;
__init__.pyc
__pycache__/
openstack.pyc
test.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this moment I realize that I have forgot to add .gitignore. And to be honest,
hate to do this. What should I place there? Should I put this __pycache__ folder too?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-have-no-fear-joe-is-here"&gt;
&lt;h2&gt;But have no fear Joe is &lt;a class="reference external" href="https://github.com/karan/joe"&gt;here&lt;/a&gt;.&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/karan/joe"&gt;Joe&lt;/a&gt; will generate .gitignore for you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;joe python &amp;gt; .gitignore
&lt;span class="nv"&gt;$ &lt;/span&gt;cat .gitignore
&lt;span class="c"&gt;### joe made this: https://goel.io/joe&lt;/span&gt;

&lt;span class="c"&gt;#####=== Python ===#####&lt;/span&gt;

&lt;span class="c"&gt;# Byte-compiled / optimized / DLL files&lt;/span&gt;
__pycache__
&lt;span class="se"&gt;\*&lt;/span&gt;.py&lt;span class="o"&gt;[&lt;/span&gt;cod&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# C extensions&lt;/span&gt;
*.so

&lt;span class="c"&gt;# Distribution / packaging&lt;/span&gt;
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg
&lt;span class="c"&gt;#( ... )&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Joe can create gitignore rules for many other files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;joe list
actionscript, ada, agda, android, anjuta, appceleratortitanium, archives,
archlinuxpackages, autotools, bricxcc, c, c++, cakephp, cfwheels,
chefcookbook, clojure, cloud9, cmake, codeigniter, codekit, commonlisp,
composer, concrete5, coq, craftcms, cvs, dart, darteditor, delphi, dm,
dreamweaver, drupal, eagle, eclipse, eiffelstudio, elisp, elixir, emacs,
ensime, episerver, erlang, espresso, expressionengine, extjs, fancy, finale,
flexbuilder, forcedotcom, fortran, fuelphp, gcov, gitbook, go, gradle,
grails, gwt, haskell, idris, igorpro, ipythonnotebook, java, jboss,
jdeveloper, jekyll, jetbrains, joomla, jython, kate, kdevelop4, kohana,
labview, laravel, lazarus, leiningen, lemonstand, libreoffice, lilypond,
linux, lithium, lua, lyx, magento, matlab, maven, mercurial, mercury,
metaprogrammingsystem, meteor, microsoftoffice, modelsim, momentics,
monodevelop, nanoc, netbeans, nim, ninja, node, notepadpp, objective-c,
ocaml, opa, opencart, oracleforms, osx, packer, perl, phalcon, playframework,
plone, prestashop, processing, python, qooxdoo, qt, r, rails, redcar, redis,
rhodesrhomobile, ros, ruby, rust, sass, sbt, scala, scons, scrivener, sdcc,
seamgen, sketchup, slickedit, stella, sublimetext, sugarcrm, svn, swift,
symfony, symphonycms, tags, tex, textmate, textpattern, tortoisegit,
turbogears2, typo3, umbraco, unity, vagrant, vim, virtualenv, visualstudio,
vvvv, waf, webmethods, windows, wordpress, xcode, xilinxise, xojo, yeoman,
yii, zendframework, zephir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if you are convinced, you will find Joe &lt;a class="reference external" href="https://github.com/karan/joe"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="git"></category><category term="gitignore"></category></entry><entry><title>How to use PIPE in python subprocess.Popen objects</title><link href="http://kendriu.com/how-to-use-pipes-in-python-subprocesspopen-objects" rel="alternate"></link><updated>2015-02-22T00:00:00+01:00</updated><author><name>Andrzej Skupień</name></author><id>tag:kendriu.com,2015-02-16:how-to-use-pipes-in-python-subprocesspopen-objects</id><summary type="html">
&lt;!-- --&gt;
&lt;p&gt;This is something, that I always have to check. So today I'm writing it down.&lt;/p&gt;
&lt;p&gt;Documentation to subprocess.Popen is &lt;a class="reference external" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So pipelines are useful when you want to do something with output of command
performed by Popen. What you would like to do with output:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pass it to another bash command&lt;/li&gt;
&lt;li&gt;use it inside Python script&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="pass-output-to-another-bash-command"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Pass output to another bash command&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So you want to pass output of first bash command to another. This will be
equivalent of this code in bash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls /etc &lt;span class="p"&gt;|&lt;/span&gt; grep ntp
ntp-restrict.conf
ntp.conf
ntp_opendirectory.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In Python you do that like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ls /etc'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grep ntp'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="do-it-in-the-proper-way"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Do it in the proper way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Call ls.stdout.close() before grep.communicate() so that if grep
dies prematurely, ls would exit sooner. And add ls.wait()
at the end, to avoid creating a zombie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ls /etc'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grep ntp'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;grep.stdin.close() is called by grep.communicate().&lt;/p&gt;
&lt;p&gt;Another way to write it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'grep ntp'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ls /etc'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, declaration order of commands in pipe doesn't matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-to-communicate-function"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Alternative to communicate function&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Instead of  grep.communicate() function you can use grep.stdout.read().
But first you have to wait for end of subprocess call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although this way have one disadvantage. It moves file pointer do the end of file.
So every subsequent call will return empty string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;ntp-restrict.conf&lt;/span&gt;
&lt;span class="go"&gt;ntp.conf&lt;/span&gt;
&lt;span class="go"&gt;ntp_opendirectory.conf&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Further more this has one more disadvantage. If you first wait() and then
read() a program that produces a lot of output (more than 4 kilobytes),
you'll get a deadlock.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a class="reference external" href="http://gedmin.as"&gt;Marius Gedminas&lt;/a&gt;, J.F. Sebastian for help with this article.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="popen"></category><category term="pipe"></category></entry></feed>